MODULE constantes
IMPLICIT NONE
REAL, PARAMETER :: degtorad=(4.0*ATAN(1.0))/180 !Conversion de angulos
REAL, PARAMETER :: pi=4.0*ATAN(1.0)
INTEGER, PARAMETER :: npts= 6000 !Numero de puntos a calcular
!Densidad del aire
REAL, PARAMETER :: rho = 1.29
!Coeficientes de arrastre
REAL, PARAMETER :: sphere = 0.47
REAL, PARAMETER :: hsphere = 0.42
REAL, PARAMETER :: cone = 0.5
REAL, PARAMETER :: cube = 1.05
REAL, PARAMETER :: angcube = 0.8
REAL, PARAMETER :: cilinderlong = 0.82
REAL, PARAMETER :: cilindershort = 1.15
END MODULE constantes
!-----------------------------------------------------------------------------------------------------
SUBROUTINE nofriction (xin,yin,vin,thetain,xmaxnf,ymaxnf,timenf)
USE constantes
IMPLICIT NONE
INTEGER :: i
REAL, DIMENSION (1:npts) :: x,y,t
REAL :: xin, yin, vin, thetain !Variables externas
REAL :: xmaxnf, ymaxnf, timenf !Variables internas
thetain=thetain*degtorad !Conversion de grados a radianes
xmaxnf = xin+((vin*vin*SIN(2*thetain))/(9.806))
ymaxnf = yin+(((vin*vin)*(SIN(thetain)*SIN(thetain)))/(19.612))
timenf = (2*vin*SIN(thetain))/(9.806)
!Abre archivo para escribir los valores calculados en el ciclo
OPEN (1, FILE="nofriction.dat")
!Calcula la posicion para cada t(i)
DO i=1, npts, 1
t(i)=FLOAT(i)*0.01
x(i) = xin + (vin*COS(thetain)*t(i))
y(i) = yin + (vin*SIN(thetain)*t(i)) - (4.903*t(i)*t(i))
WRITE (1,1001) x(i), y(i)
1001 FORMAT (f11.5,f11.5)
IF (y(i)<0) EXIT
END DO
!Cierra archivo
CLOSE (1)
END SUBROUTINE nofriction
!-----------------------------------------------------------------------------------------------------
SUBROUTINE friction (xin,yin,vin,thetain,xmaxf,ymaxf,timef)
USE constantes
IMPLICIT NONE
INTEGER :: i !Contador
CHARACTER :: object !Selector de casos
REAL, DIMENSION (0:npts) :: z,w,u,velz,velw,az,aw !Posiciones
REAL :: xin, yin, vin, thetain !Variables de entrada
REAL :: xmaxf, ymaxf, timef !Variables de salida
REAL :: ad, area, radius, cd, mass !Para calculo de la fuerza de arrastre
PRINT *, "Ingresa la masa del objeto (kg)"
READ *, mass
PRINT *, "Selecciona la forma que tiene el proyectil"
PRINT *, "a -- esfera"
PRINT *, "b -- media esfera"
PRINT *, "c -- cono"
PRINT *, "d -- cubo"
PRINT *, "e -- cubo angulado"
PRINT *, "f -- cilindro largo"
PRINT *, "g -- cilindro corto"
READ *, object
SELECT CASE (object)
CASE ("a")
PRINT *, "Ingresa el radio de la esfera"
READ *, radius
area = pi*radius*radius
cd = sphere
CASE ("b")
PRINT *, "Ingresa el radio de la esfera"
READ *, radius
area = pi*radius*radius*0.5
cd = hsphere
CASE ("c")
PRINT *, "Ingresa el radio del cono"
READ *, radius
area = pi*radius*radius*(1.0/3.0)
cd = cone
CASE ("d")
PRINT *, "Ingresa el lado del cubo"
READ *, radius
area = radius*radius
cd = cube
CASE ("e")
PRINT *, "Ingresa el lado del cubo"
READ *, radius
area = radius*radius*SQRT(2.0)
cd = angcube
CASE ("f")
PRINT *, "Ingresa el radio del clindro"
READ *, radius
area = pi*radius*radius
cd = cilinderlong
CASE ("g")
PRINT *, "Ingresa el radio del cilindro"
READ *, radius
area = pi*radius*radius
cd = cilindershort
CASE DEFAULT
PRINT *, "Comando no definido."
END SELECT
!Escribe las condiciones iniciales en la primer posicion del arreglo
z(0) = xin
w(0) = yin
velz(0) = vin*COS(thetain)
velw(0) = vin*SIN(thetain)
ad = (0.5*rho*area*cd)/mass
az(0) = -ad*velz(0)*velz(0)
aw(0) = 9.806-(ad*velw(0)*velw(0))
u(0) = 0
!Abre archivo y escribe los valores iniciales de z y w
OPEN (2, FILE="friction.dat")
WRITE (2,1001) z(0),w(0)
1001 FORMAT (f11.5,f11.5)
!Calcula la posicion en cada t(i)
DO i=0, npts, 1
u(i+1) = u(i) + 0.01
velz(i+1) = velz(i)+az(i)*u(i+1) !Velocidad a final de t a delta t
velw(i+1) = velw(i)+aw(i)*u(i+1)
az(i+1) = -ad*velz(i)*velz(i)
aw(i+1) = -9.806-(ad*velz(i)*velz(i))
z(i+1) = z(i)+velz(i)*u(i+1)+(0.5*az(i)*u(i+1)*u(i+1))
w(i+1) = w(i)+velw(i)*u(i+1)+(0.5*aw(i)*u(i+1)*u(i+1))
WRITE (2,*) z(i+1), w(i+1)
IF (w(i)<0) EXIT
END DO
!Cierra archivo
CLOSE (2)
xmaxf = z(i)
ymaxf = MAXVAL(w)
timef = u(i)*10.0
END SUBROUTINE friction
!-----------------------------------------------------------------------------------------------------
PROGRAM proyectilfriccion
USE constantes
IMPLICIT NONE
REAL :: xin, yin, vin, thetain
REAL :: xmaxnf, ymaxnf, timenf, xmaxf, ymaxf, timef
REAL :: error !Diferencia de alcances en ambos casos
PRINT *, "Ingresa los valores iniciales: xO, yO, vO, thetaO"
READ *, xin, yin, vin, thetain
!Llama subrutinas
CALL nofriction (xin,yin,vin,thetain,xmaxnf,ymaxnf,timenf)
CALL friction (xin,yin,vin,thetain,xmaxf,ymaxf,timef)
error = ((xmaxnf-xmaxf)/xmaxf) * 100.0
PRINT *, "----------------------------------------------"
PRINT *, "Con coordenadas", xin, yin
PRINT *, "Con una velocidad inicial de", vin, "m/s"
PRINT *, "Y un angulo de", thetain, "radianes respecto al piso"
PRINT *, "----------------------------------------------"
PRINT *, "<<< SIN FRICCION >>>"
PRINT *, "El tiempo total de vuelo es:", timenf, "s"
PRINT *, "La altura maxima alcanzada es:", ymaxnf, "m"
PRINT *, "Tiene un alcance de:", xmaxnf, "m"
PRINT *, "----------------------------------------------"
PRINT *, "<<< CON FRICCION >>>"
PRINT *, "El tiempo total de vuelo es:", timef, "s"
PRINT *, "La altura maxima alcanzada es:", ymaxf, "m"
PRINT *, "Tiene un alcance de:", xmaxf, "m"
PRINT *, "----------------------------------------------"
PRINT *, "El error cometido al no considerar la friccion del aire &
&es del", error, "%"
END PROGRAM proyectilfriccion
